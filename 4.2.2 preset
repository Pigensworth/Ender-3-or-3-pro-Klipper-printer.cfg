# This file contains pin mappings for the stock 2020 Creality Ender 3
# with the 32-bit Creality 4.2.2 board. To use this config, during
# "make menuconfig" select the STM32F103 with a "28KiB bootloader" and
# serial (on USART1 PA10/PA9) communication.
# adapted for my printer ender3-4.2.2

# If you prefer a direct serial connection, in "make menuconfig"
# select "Enable extra low-level configuration options" and select
# serial (on USART3 PB11/PB10), which is broken out on the 10 pin IDC
# cable used for the LCD module as follows:
# 3: Tx, 4: Rx, 9: GND, 10: VCC

# Flash this firmware by copying "out/klipper.bin" to a SD card and
# turning on the printer with the card inserted. The firmware
# filename must end in ".bin" and must not match the last filename
# that was flashed.

# See docs/Config_Reference.md for a description of parameters.

[stepper_x]
step_pin: PC2
dir_pin: PB9
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: ^PA5
position_endstop: 0
position_max: 235
homing_speed: 50

[stepper_y]
step_pin: PB8
dir_pin: PB7
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: ^PA6
position_endstop: 0
position_max: 235
homing_speed: 50

[stepper_z]
step_pin: PB6
dir_pin: !PB5
enable_pin: !PC3
microsteps: 16
rotation_distance: 8
endstop_pin: ^PA7
position_max: 250
position_min:-2

[extruder]
max_extrude_only_distance: 100.0
step_pin: PB4
dir_pin: PB3
enable_pin: !PC3
microsteps: 16
rotation_distance: 33.683
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA1
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC5
control: pid
# tuned for stock hardware with 200 degree Celsius target
pid_Kp: 21.527
pid_Ki: 1.063
pid_Kd: 108.982
min_temp: -30
max_temp: 250
pressure_advance: 0.85

[heater_bed]
heater_pin: PA2
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
control: pid
# tuned for stock hardware with 50 degree Celsius target
pid_Kp: 54.027
pid_Ki: 0.770
pid_Kd: 948.182
min_temp: 0
max_temp: 130

[fan]
pin: PA0

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

[display]
lcd_type: st7920
cs_pin: PB12
sclk_pin: PB13
sid_pin: PB15
encoder_pins: ^PB14, ^PB10
click_pin: ^!PB2

[include timelapse.cfg]

[include mainsail.cfg]

[exclude_object]

[temperature_sensor Apple_Pi] # Showing the Pi's temperature on the graph.
max_temp:60
sensor_type: temperature_host
sensor_path:/sys/class/thermal/thermal_zone0/temp

[mcu host] # Makeing the Pi an MCU so it's gpio pins can be used and it's temperature retrieved.
serial: /tmp/klipper_host_mcu

[led Nozzle_Led] # An LED wired to gpio 4 on the Raspberry Pi.
white_pin: host:gpio4
cycle_time: 0.010
hardware_pwm: False

[delayed_gcode Welcome_1] # These three welcomes will make the printer beep when it starts up.
initial_duration: 0.1
gcode:
  M300 S740

[delayed_gcode Welcome_2]
initial_duration: 0.7
gcode:
  M300 S840

[delayed_gcode Welcome_3]
initial_duration: 0.8
gcode:
  M300 S840



[gcode_macro G29] # Making G29 probe the bed.
gcode:
    G28
    BED_MESH_CALIBRATE
    G0 X0 Y0 Z10 F6000
    BED_MESH_PROFILE save=default
    #SAVE_CONFIG



[gcode_macro START_PRINT] # This is my start print macro. Instead of purging along the edge I usually just do a skirt in the slicer.
gcode:
    # These set variables with data retrieved from the slicer.
    {% set BED_TEMP = params.BED|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|float %}
    {% set FILAMENT_TYPE = params.FILAMENT_TYPE|string %}
    {% set FILAMENT_NAME = params.FILAMENT_NAME|string %}
    # Start bed heating
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    G90

# The chunk of code below this will change the pressure advance per material name.
# If you want to use it then uncomment it and change the names and types to whatever you're using.
# Don't forget to also sset the pressure advance values too.
    {% if FILAMENT_TYPE == "PLA" %}
      {% if FILAMENT_NAME == "Purple" %}
        SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE=0.276
      {% elif FILAMENT_NAME == "White" %}
        SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE=0.276
      {% elif FILAMENT_NAME == "Green" %}
        SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE=0.21
      {% endif %}
    {% elif FILAMENT_TYPE == "Nylon" %}
      {% if FILAMENT_NAME == "Black" %}
        SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE=0.276
      {% endif %}
    {% elif FILAMENT_TYPE == "PETG"%}
      {% if FILAMENT_NAME == "Black" %}
        SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE=0.276
      {% elif FILAMENT_NAME == "Translucent" %}
        SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE=0.276
      {% endif %} 
    {% else %}
      SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE=0
    {% endif %}


    {% if printer["bed_mesh"].profile_name == "" %} # This will check if there's any bed profile loaded, and if not then it will probe and call it 'default'.
      G28
      BED_MESH_CALIBRATE
      BED_MESH_PROFILE save=default
      BED_MESH_PROFILE LOAD=default
    {% else %}
      G28
      G1 Z10 F3000
    {% endif %}

    M190 S{BED_TEMP} # Basically just waiting till everything is up to temp.
    M109 S{EXTRUDER_TEMP}
    G92 E0 # This sets the current position of the extruder to 0.
    G1 E2 F1500 # Extruding 2mm to counteract for the filament oozing while heating up.

[gcode_macro END_PRINT] # An end print macro that retracts, gives you the print, and turns everything off.
gcode:
    {% set machine_depth = params.machine_depth|default(220)|float %}
    G91 ;Relative positioning
    G1 Z10 E-2 F2700 ;Retract a bit
    G90 ;Absolute positioning

    G1 X0 Y{machine_depth} ;Present print
    M106 S0 ;Turn-off fan
    M104 S0 ;Turn-off hotend
    M140 S0 ;Turn-off bed

    M84 X Y E ;Disable all steppers but Z


[pwm_cycle_time Beeper] # Lets you use the beeper on the screen.
pin: PC6
value: 0
shutdown_value: 0
cycle_time: 0.001
[gcode_macro M300]
gcode:
 #    Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=Beeper VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=Beeper VALUE=0
